/*
  OpenAPI Petstore

  This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.

  The version of the OpenAPI document: 1.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.petservice;

import "google/protobuf/empty.proto";
import public "models/pet.proto";

service PetService {
  rpc AddPet (AddPetRequest) returns (google.protobuf.Empty);

  rpc DeletePet (DeletePetRequest) returns (google.protobuf.Empty);

  rpc GetPetById (GetPetByIdRequest) returns (Pet);

  rpc UpdatePet (UpdatePetRequest) returns (google.protobuf.Empty);

  rpc UpdatePetWithForm (UpdatePetWithFormRequest) returns (google.protobuf.Empty);

}

message AddPetRequest {
  // Pet object that needs to be added to the store
  Pet pet = 1;

}

message DeletePetRequest {
  // Pet id to delete
  int64 petId = 1;
  string apiKey = 2;

}

message GetPetByIdRequest {
  // ID of pet to return
  int64 petId = 1;

}

message UpdatePetRequest {
  // Pet object that needs to be added to the store
  Pet pet = 1;

}

message UpdatePetWithFormRequest {
  // ID of pet that needs to be updated
  int64 petId = 1;
  // Updated name of the pet
  string name = 2;
  // Updated status of the pet
  string status = 3;

}

