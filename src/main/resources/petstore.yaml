openapi: 3.0.0
info:
  title: OpenAPI Petstore
  description: This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about OpenAPI generator
  url: https://openapi-generator.tech
tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      x-accepts: application/json
      x-tags:
        - tag: pet
      x-contentType: application/json
    post:
      x-options:
        bar: baz
      tags:
        - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        405:
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      x-accepts: application/json
      x-tags:
        - tag: pet
      x-contentType: application/json
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
      security:
        - api_key: []
      x-accepts: application/json
      x-tags:
        - tag: pet
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        405:
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      x-accepts: application/json
      x-tags:
        - tag: pet
      x-contentType: application/x-www-form-urlencoded
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      x-accepts: application/json
      x-tags:
        - tag: pet
components:
  schemas:
    Category:
      title: Pet category
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A category for a pet
      example:
        name: name
        id: 6
      xml:
        name: Category
    Tag:
      title: Pet Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A tag for a pet
      example:
        name: name
        id: 1
      xml:
        name: Tag
    Pet:
      title: a Pet
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
          x-kalix-field: [(kalix.field).entity_key = true]
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      description: A pet for sale in the pet store
      example:
        photoUrls:
          - photoUrls
          - photoUrls
        name: doggie
        id: 0
        category:
          name: name
          id: 6
        tags:
          - name: name
            id: 1
          - name: name
            id: 1
        status: available
      xml:
        name: Pet
    ApiResponse:
      title: An uploaded response
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the pet
        status:
          type: string
          description: Updated status of the pet
    body_1:
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        file:
          type: string
          description: file to upload
          format: binary
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header